import org.scalatest._


class Occurences {

  def allOccurences(genome: String, pattern: String): Iterator[Int] = {
    genome.sliding(pattern.length).zipWithIndex.filter(p => pattern.equals(p._1))
      .collect {case a:(String,Int) => a._2}
  }

}

class PatternMatchingSpec extends FlatSpec with Matchers {


  "" should "find all occurrences of substring" in {
    val pattern = "ATAT"
    val genome = "GATATATGCATATACTT"

    val indexes = new Occurences().allOccurences(genome,pattern)

    assert(indexes.toList === List(1, 3, 9))
  }

  "" should "find all occurrences of substring in test case" in {
    val pattern = "AAGTGAAA"
    val genome = "TAAAGTGAAAGTGAAAGTGAGGGGCAAAGTGAATAATCAAGTGATAAGTGAAAGTGATAAGTGAAAGCGGAACAAGTGAAAAGTGAAAGTGAAAGTGATATCCTAACAAGTGACGACAAGTGAAAGTGACAAGTGACTCAAGTGAAAAGTGACCGAAAGTGAGGGAGAGCTGGCATAAAGTGATGAAAGTGATAAGTGACTTAAGTGATCCGAGAAGTGAAAGTGATTCCAAAGTGACAAGTGATAAGTGAATAAGTGACCAAGTGATCCCATGCAAAGTGATCAAGTGAAAGTGACAAGTGATGACTAAGTGAAAGTGAATAAGTGAAAGTGATTTTTCGTAAGTGATCGAAGTGAGGTCTTGGCCAAGTGAAAGTGAAGCCAAGTGAAAGTGAACTAAGTGATAAGTGAAAGTGACTGTTTTGAAGTGAAAGTGAATTCTGTGAAGTGAGTCTAAGTGATTCAAAGTGAAAGTGATAAAGTGACGAAGTGAAAGTGAGGAAGTGACAAGTGACTGATAGAAAGTAAAGTGATAATAAGTGAAAGTGAAAGTGACCAAGTGAAGCAAAGTGAAAGTGATGAAGTGAGAGAAGTGAGGGCGGGAAGTGACAAGTGAATAAGTGATAGGTGCACAAAGTGAAGGAAGTGATAATGTAGAAGTGAAAGTGAGGAAGTGAATTAATCAAGTGAGCGGTTTGAGAAGTGATGCAAGTGACCCAAGTGAGACCGAAGTGAAAAAGTGACGATTTAAGTGAAAGTGAAAGTGACTAAGTGAAAGTGACCGTAAGTGATAAAAGTGAAAGTGATGCCCAACTCTCTACTTAAGTGAGAAGTGACCCACAAGTGAAAGTGACCTGGAAGTGAAAGCAAGTGAAAGTGACCCCGAAGTGAATAAGTGACAAGTGAAAGTGACCAAACAATGCGCAAGTGAAAGTGAGGCGAAGTGAGCGAAGTGAACACAAGTGAGTAAAGTGAGTTTGCGTAAGTGAAGCAAGTGACTAAGTGAAAGTGATCAAAGTGACGGATGCTAAGTGAATAAGTGACTTGAAGTGAAAGTGACGGAATAAGTGAGAGAACACGGCCCCAAGTGAGGTAAAGTGAAAGTGAGCAGTTAAGTGACCGAGGGTAAGTGAACGAAAGTGAAAGTGACCCTTCAAGTGAAAGTGAAAAGTGAACCGCCCAAGTGATATCCTTGGAAGTGACGCAAGTGAAAGTGACAAGTGAAAGTGATGTATAGAAGTGACGAAGTGAAAGTGAACTCTAAGTGAAAGTCATCAAGTGACCCGGGGGAAGTGAAAGTGACAGCCTTGAAGTGAAGCAAAAGTGAAAGTGAAAGTGAAAGTGATTCAAGTGAGCGAGAAGTGACGATGAAGTGACGTAAGTGAGCCTAAAGTGATGCAAGTGAAAGTGAGAAGTGAAAGTGAAAGTGACATAAGTGAAAGTGAAAGTGAAAGTGATAAGTGAAAGTGACGAAGTGAACCAAGCAAGTGAAAAGTGATTCGACAAACAAGTGAAAGTGACTAGCGGGAAAGTGAAAGTGAAAGTGACACGCGGTTAAGTGAATGAAGTGAAAGTGAGCGAAGTGATTTATACAGAAGTGACAAGTGAGGCGAAGTGAAAGTGAGAAAGTGACATTGAAGTGACAAGTGAGAAGTGACGAAGTGACGACAAGTGAAGGCTTAAGTGAGAAGTGACGTTATACTAAGTGAAAGTGATTTATCCAAAGTGACAAGTGAAAGTGAAAGTGACTACAAGTGACGAAGTGATGCAAGTGATTAAAGTGACATAAGTGATAAGTGAAAGTGAGCCGCAAAGCCCAGAAGTGACCAAAGTGAGGCAGAAAGTGAGGCGGCGAAGTGACCCTAAAGTGATTTCATTAAAAGTGACATTCAAGTGAGCAATGTCAAGTGAGAAGTGAAAGTGAAAGTGAAAGTGATCCCAGAAGTGAGTTGCAAGTGACTAAGTGAAAGTGATACTGAGAAAGTGAAAGGATAAGTGAAATCGGAAGTGACAAGTGAAAGTGAAAGTGAATATGAATTCACAAGTGATTGTAAGTGATCGTAAGTGAAAAAGTGAAAGTGAGCAGAAGTGAAAGTGAGTAAGTGACATAAGTGAAAGTGAAAGTGAGCCAAGTGAAAGTGAACAAGTGAGAAGTGACTCGAGGAAAGTGACTGTCACAAAGTGAAAGTGAAAGTGATGTAAGTGAAGCCTCAAAGTGATCAAAGTGAAAGTGATAAGTGAGAAGTGAAATTAAGTGACGCGAAAGTGACAAGTGAAAGTGAATAGAGCAAAAAGTGAAAGTGATAAGTGAAGGTAAGTGAGACTCTGCTATCAAGTGATAAGTGAATTTCAAGTGAGAAAAGTGATTGAAGTGAGAAGTGAAAGTGATATAACTATGAAGTGAATATTGAAGTGATGCAAAGTGATCAAAGTGAAAGTGAAAGTGAAAAGTGAGTGAAAGTGAGCAAAGTGAACGTGGAAGTGAGAAGGGACAAGTGAGGAAGTGAAGATGTAAGTGAGGCAACAAGTGAAAGTGAACTTGTGGCAAGTGAAAGCTCCAAGTGATGCACAAAGTGAGTAAGTGACTAAGTGATTGAAGTGATAAGTGAAAGTGAGAAGTGATCGTTAAGTGATGTCTGCTAAGTGATAAGTGAGACCTTTTAAAGTGAGGAGTGTTTAAGTGAAGTAAGCTCGAAAGTGACTCAAGTGATGCAAGTGAAAGATCAAAGTGACAAGTGAGATAAGTGACAAGTGAAAGTGAAAAGTGAATCCAAGTGAAAGTGACAAGTGATCGGAAGTGACGCGAAGTGAGAAGTGAATCCTACAAGTGACAAGTGAGGGTAAGTGACTAAGTGAAAGTGACAAGTGAGAAGTGAGATGTCAAGTGAAAGTGAATGAAAGTGAAAGTGACTACAAGTGAAAGTGAAGAAGTGAAAGTGACAAAAGTGATAAGTGAGGTGATCCTGGATAAAGTGAAAGTGAAAAGTGAAAGTGACAGAAGTGAAAGTGACAAGTGACTAAGTGAAAGTGACTGTAAGTGAAAGTGAAAGTGAGCCGTTGAGGTAAAGTGAGTGTCAAGTGAAACCTCAAAGTGATAAGTGAAAGTGAAAGTGAAAGTGAAAGTGACCCGTCTAAAGTGAAAGTGATAAGTGATAAGTGAGCAAGTGAGAAAGTGAAAAGTGAAAGTGACGCCCATATAGGAAGTGATTAGTTAAGTGAAAGTGACGAAAGTGAAAGTGAAAGTGAAAGTGAAAAGTGATATGGACTCAAGTGAAAAAGTGATTAAGTGAGTGAGCAAGTGACGAAGTGAGAACCCAAGTGAATAAGTGAGCTAAGTAAGTGACAAGTGAAAGTGAAAAGTGAAAGTGAAAAGTGAAAGTGACGGAAGTGAAAGTGAAAGTGAGCCAAGTGAAAAAGTGAATCAAAGTGAGAAGCGACAAGTGACAAGTGATTAAGTGACGAAGTGAAAGTGATAAGTGAGGACAAGTGACAAGTGAGTAATCAAGTGATAAGTGAAAAGTGATAAAAGTGAAGCAAGTGAAAGTGAAAGTGAGAAGTGAGAAAAGTGAGACTCCGCTAAAGTGATAAGTGAAAGTGATCAAGTGAACTCGGAAGTGAGCAAGTGAGCAGCAAGTGATCATTTAAGTGAATAAGTGACATATCCTCTGCCGGCGTAAGTGAAAGTGAAAGTGAACAATACAAAGTGAAAGAATTAAGTGAAAGTGACTAAGTGAGAAGTGAAAGTGAGAAGTGAATTAAGTGAAAGTGACAATACTCTAGCGTAAGTGAAAGTGAATAAAGTGAAAGGGGAAGTGATTAAGTGATAAGTGAAAAGTGAAAGTGATTAAGTGACAAGTGAAAGTGAATCAAGTGAACGAAGTGAAGAAGTGAGAAGTGATCCAAATAAGTGACTCGCAAGTGAACTCTAAGTGAATACCAAGTGATAAGTGAAAGTGAAAGTGAAAGTGAAAGTGAACACAAGTGAACCCTTTAAAGTGAAGAAGTGATGTAAACGGGAAGTGAAAGTGAAAGTGAAAGTGAAAGTGATCAAGTGACAAAGTGACTAGATGAAGTGAAATAAGTGAGTCAAAATAAGTGAAAGTGATTAAGTGACAAGTGAAACAAAGTGAGAAAGTGAAAGTGAAAGTGAATGGAAGTGAAAGTGAAAGTGAAAGTGACTAAGTGATAAGTGAAAGTGAAAGTGAAAGTGAAAGTGATCAAGTGAAAGTGACCTCCAACAAGTGAGAAAGTGATAAGTGAAAGTGAATAAGTGAGAAGTGAACATCTCCACAAGTGAATGAAGTGATTTAAAAGTGAGCATAAGTGAATTGCAAGTGATAAGTGAGTCGAAGTGAGTCAAGTGAATTAAAGTGAGAAGTGAAAGTGAAAGTGATGTAAGTGAAAAGTGACCAAGTGACGAAGTGACGCCCTAAGTGATAAAAGTGATAAGTGAAAGTGAAAGTGACGAAGTGAGGCAAGTGAAAGTGACAAGTGAAAGTGAGAAGTGAAAGTGAAAGTGAAAGTGAAAAAGTGAAAAGTGATAAGTGAACAAGTGATGACTACAAGTGAAAGTAAGTGAAAAGTGAGTGAGCAAGTGAAACCCTGAAGTGAAAGTGAAAGTGAGTAAGTGAACCAAAGTGATCTCAAGTGAAAAGTGACATAAGTGAGCGCAAGTGAGCTAAGTGATCCTCAAAGTGAAAGTGATAAGTGACAGGTTGGGTGAAGTGAAATACACTGTAAGTGAAAAGTGACTAAAGTGAAAGTGAAAGTGAAAGTGAGGCATTGCAAGTGATGGAAGTGACCCTACACTAGAAGTGATGAAAGTGAAAAGTGATACCATAAGTGACTAAGTGAAAAGTGACAAGTGAGTCTAAGTGACTTAAAATAAGTGAGTTAAGTGAAAGTGATGATTAGGAGAAGTGACAAGTGAAAGTGAACAAGTGAGGGAAAGTGAAACAAAGTGAACAAGTGAAAGTGAAGTATAGGCAAGTGAAAGTGACAAGTGAAAAAGTGAAAAGTGAAAGTGATAGCGAAAAGTGAAAGTGACAAGTGACTAAATGTGAAGTGAAAGTGATGAAGTGAGCAAGTGAGAAGTGACAAGTGACAAGTGATTATAAGTGAAAAGTGAAAGTGATAAAGTGAAAGTGAAAGTGATTACAAGTGACTAAGTGACTTGGGGCGGGAAGTGATGGAGAAGTGAAAGTGACGGAGAAAGTGAGTAAGTGAAAGTGAAAGTGAAAAAGTGATGGCGAAGTGAACAAGTGAAAGTGAGGCAAAGTGAAGGAAGTGAAGGGAAGTGATCCACCGAAGTGAAAGTGAAAGTGATAAAGTGATGAAGTGACGCAAGTGAAAGTGACTCTAAGTGAGACGAAAAAAGTGAGGAAGTGAGTTCAAGTGAGAAGTGACAAGTGAATCGGAAAGTGAAAGTGAAAGTGAAAGTGATAAAAGTGATAAGTGAAAGTGATGAAGTGAGCAAGTGATATAAGTGAAAGTGATAAGTGATGGCCCAAGTGAGCTTAAGTGAAAGTGATAAGTGAAAGTGAAAGTGAAGCAAGTGAAAGTGACAAGTGAAAGTGAAAGTGAATAAGTGACGAAGTGATTCCAAAGTGAAAGTGAAAGTGAAAGTGAAAGTGAGACAAGTGATACTTAAAGTGATGAAGTGAATAAGTGAAAGTGAAAAGTGAAAGTGAAAGTGACCGCCAGGTTTTGCAAGTGACAAGTGATAAGTGACTTGGAATATCAGGTACTAGACAAGTGACAAGTGAAAGTGATCCGTTGAAGTGAGCCATTAAAGTGATGTAAGTGAACCGCGGAAGTGAAAAGTGAAGGAGTAAAGTGACTAGTGGTAAGTGACAAGTGAACAATCAAGTGATGAAGTGAAAGTGAAAAGTGAGAAGTGAATCAAGTGAAAGTGAAAGTGAAAAAGTGAAAGTGATATCGCGGATCTGAACTGCAAGTGAAAAAGTGATCAAAAGTGACAAAGTGAAAGTGAAAGTGAAAGTGATTGTCGAAGTGAAAGTGAGGCAAGTGACAAGTGAATAAAGTGACGGGAGAAGTGACGCCCAAAGTGACCAAGTGAAAGTGATAAGTGACAAAGTGATACAAGTGAGATAAGTGAAAGTGAAAGTGAAAGTGACTTACTGTTTTGAAAGTGAGAAGTGAACAAGTGAAAGTGAGCAAGTGAAAGTGAACAAAAGTGAAAAGTGAACAAGTGACAGAAAGTGATATCTAAGTGACTATGGAAGTGATAAGTGACAGTAGGAAGTGAAAGTGAACTTAAGTGAAAGTGAAGCGCGCGGAAGTGAGCCACTGTGATGAAGTGAAAGTGAAAGTGAAAGTGATGGTAGTGTCCCAATAAGTGAGTCAAGTGATCAAAGTGAAAGTGAGTAAGTGAAAGTGAAAGTGAGAAAAGTGAGTCCAAGTGAATGTTGTGAAGTGAAGAAGTGAGCAAGTGACAACTCGATTTAAGTGAAACTTTCTATCAAGTGAACTGGAAGTGATTCAAACAAGTGACAAGTGAAAGTGAGAAGTGAGTGTCCAAAGTGATGTAAGTGAAAGTGATCAGGAATGGACGCACTAAAGTGAAAGTGAGGAAGTGAACCCTTGAAGTGAGTAAGTGAAAAAGTGAACCTGTAAGTGAATGGAAGTGATAAGTGAAAGTGAAAGTGAAAGTGAAGGACTCAAAGTGATGAAGTGAAAGTGATCTTTGCCGTCCAGAAGTGAAAGTGATTCCCGCTAAGTGAAAGTGATAAGTGATAAGTGATAAGCAAAGTGATAAGTGACAAGTGAAAGTGACATAAAGTGATTCCATCGAAGTGATTTTTGAGAAGTGAACGTAAAGGAAGTGAACCTCTTAAGTTCTGCGCCGTAAGTGAAGTCACAAGTGAAAGTGACGAAGTGAGAGCGAAAGTGAAGAAAGTGAAAGTGATAAGTGAAAGTGAAAGTGATGGGTAAGTGAAGTTAAGTGAAAGTGAAAGTGACCTTAAGTGAAGCCAAGTGAGGAAGTGATAAATCAAAGTGAGAATGAAGTGAAAGTGAAAGTGACAAGTGAGGGACTCAAGTGAAAGTGATCGAAGTGAAAGTGAGTCAAGTGAGAAAGTGAGCAAGTGAAGAAGTGAAAGTGACATCCTGTGAAGTGATTCTCCTTAAGTGAAAGTGACAAGTGACGTTCCAAGTGACAAGTGATTGCTAAGTGACAAAGAAGTGAGTAAAAAGTGACAAGTGAAAGTGACCAAAGTGATAAGTGAGGGGAGCTAAGTGAGGTCCGAAGTGAGATAAGTGAAATAGCAAGTGAAAAGTGAGTGTAAGTGACTGAAAGTGATGAAATACAAGTGATCAAGTGAATACCAAGTGAAAGTGACAAGTGAGAAGTGAAAGCAAGTGAAGCAAGTGAAAGTGACTGAAGTGAATATGAAGTGAATGAAAGTGAATTGAAAGTGAAAGTGAAAAGTGAGGTAAGTGAGAAGTGAAAAAGTGACAAAGTGAAAGTGAGCCAAGTGATATAAGTGAGAAGTGAAAGTGAAAGTGACAAAAGTGAAAGTGATAAAGTGAAAGTGAAAGTGAAACAAAGTGAACGTAAGTGATTAAGTGACAGGTGAAAGTGACAAGTGAGCAAGTGAAAGTGAAAGTGACAAAGTGAGAAGTGACGCCTAGCTAAGTGAAATGAAGTGAAAGTGACCTACAGCAAGTGAAAGTGACAAGTGAAATTACCTTGGACACAAAGTGACGAAGTGAAAGTGAAAGTGATACTGAAGTGAGGAAGTGAAAGTGAAAGTGAAAGTGAAAAAGTGAAAGTGAACAAGTGAAAAGTGATGCTTAGCACCAGAAGTGAAAGTGAAAGTGAAAGTGACACACCAAGTGAGTGCAAGTGAAAAAGTGAAAGTGAAAGTGAGCGCGAAGTGATAAGTGACCAAGTGACTGAAGTGAGTCCCCCGACTACGTAAAGTGAATATAAGTGATATTAAGTGATCAAGTGAAAGTGACTGAAGTGAAAGTGAGAAGTGAGCCCTTAAAAGTGACCAAGTGAAAGTGAGACGAAGTGAAAGTGATAAGTGATAAGTGA"

    val indexes = new Occurences().allOccurences(genome,pattern)

    val indexesList: List[Int] = indexes.toList
    println(indexesList.foldLeft("")((a,b) => "" + a + " " + b))
    assert(indexesList === List(2, 8, 45, 58, 73, 80, 86, 117, 139, 214, 284, 308, 322, 367, 383, 405, 425, 465, 487, 537, 543, 567, 657, 729, 749, 755, 769, 794, 841, 858, 868, 900, 925, 1000, 1047, 1095, 1137, 1155, 1161, 1205, 1218, 1245, 1262, 1290, 1321, 1327, 1333, 1399, 1412, 1418, 1433, 1439, 1445, 1458, 1485, 1508, 1529, 1535, 1565, 1612, 1703, 1730, 1736, 1794, 1912, 1918, 1924, 1961, 1981, 1993, 2012, 2018, 2062, 2070, 2086, 2109, 2115, 2130, 2179, 2185, 2222, 2242, 2270, 2292, 2376, 2429, 2435, 2441, 2525, 2546, 2603, 2713, 2749, 2755, 2772, 2850, 2882, 2898, 2914, 2928, 2970, 2976, 2983, 2998, 3019, 3035, 3041, 3076, 3096, 3102, 3108, 3114, 3134, 3170, 3177, 3213, 3228, 3234, 3240, 3246, 3268, 3344, 3350, 3357, 3363, 3370, 3385, 3391, 3406, 3461, 3510, 3535, 3541, 3586, 3675, 3681, 3701, 3714, 3735, 3757, 3783, 3798, 3825, 3832, 3853, 3945, 3951, 3957, 3963, 4017, 4023, 4029, 4035, 4070, 4093, 4114, 4132, 4138, 4154, 4160, 4166, 4187, 4193, 4199, 4205, 4219, 4254, 4375, 4381, 4396, 4447, 4453, 4476, 4489, 4502, 4508, 4514, 4520, 4528, 4563, 4573, 4592, 4605, 4611, 4645, 4692, 4722, 4738, 4754, 4760, 4766, 4821, 4848, 4895, 4924, 4948, 4966, 4987, 5000, 5008, 5015, 5034, 5062, 5115, 5122, 5136, 5142, 5194, 5220, 5226, 5232, 5259, 5307, 5313, 5344, 5418, 5424, 5430, 5452, 5483, 5518, 5531, 5537, 5552, 5565, 5571, 5604, 5610, 5616, 5622, 5665, 5671, 5678, 5684, 5759, 5813, 5874, 5880, 5903, 5909, 5915, 5923, 5954, 5980, 5986, 5992, 6010, 6073, 6112, 6118, 6124, 6164, 6178, 6194, 6262, 6278, 6317, 6323, 6329, 6374, 6388, 6394, 6466, 6514, 6549, 6579, 6614, 6651, 6657, 6663, 6691, 6717, 6737, 6783, 6881, 6916, 6929, 6935, 6962, 6968, 7026, 7032, 7058, 7073, 7112, 7147, 7219, 7276, 7288, 7348, 7368, 7387, 7434, 7440, 7463, 7479, 7510, 7516, 7531, 7545, 7551, 7557, 7613, 7619, 7655, 7665, 7685, 7698, 7728, 7734, 7759, 7765, 7771, 7777, 7785, 7799, 7825, 7831, 7837, 7865, 7873, 7879, 7970, 7985, 8020, 8036))
  }

  def readFrom(fileName: String) = scala.io.Source.fromFile(getClass.getResource(fileName).toURI).mkString

  "Vibrio cholerae" should "find all occurrences of substring in test case" in {
    val pattern = "CTTGATCAT"
    val genome = readFrom("Vibrio_cholerae.txt")

    val indexes = new Occurences().allOccurences(genome,pattern)

    val indexesList: List[Int] = indexes.toList
    println(indexesList.foldLeft("")((a,b) => "" + a + " " + b))
    assert(indexesList === List(60039, 98409, 129189, 152283, 152354, 152411, 163207, 197028, 200160, 357976, 376771, 392723, 532935, 600085, 622755, 1065555))
  }

}


