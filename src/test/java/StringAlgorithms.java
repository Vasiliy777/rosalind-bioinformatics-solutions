import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

public class StringAlgorithms {

    @Test
    public void shouldCalculateNucleobaseCount() {
        String genome = "GCACATAAAGGGCACTTTACAACTTACCTGTTCACATAGGGGGTATCGAATATTACGTTGTTGTAGCGTCTACTGCACACGGGGTTTAGAACTAAAATAATCGTTATTGGATTGTTACCCGCTCTGTGAATAAGCGTAGATTAGCCTGACGAATATATAGTCGTGGCGTCACCCTTTGCCTTCGTAGTGGTGCAAACGTAATTAGGATGGAAACAACCCTAGCCATGCCAGGACTGCCATGTATAACTTTCGCTGCTATGAGCATGGTGCCTTTCGGAGGGTACCGAGTATGCCATCCGAGTGCGATTTGAGCTTGTACTTCATTGCGCTCACATTGGCGTCGACCCCGGGGCAAGCGTTTACCTAACACAGAAGGCATTGCCTAGCCGCCATCACCAGTACGTTCGTCCACAACGTTGCTTGAGACGGGACCACTATAACTTCTGGACCAGATAAATGAGCTGAGGTTAATAACCTACCCTGACGCTTCATGTAACAGCAACGGACTGTGAGCGGATCGTCCTTTTCTCTACTTTTTGTCACCTTCCTTTACACTCGAATTCCTCCGATCGCACTAGGCTTCCCTCGCCATCGTAGTCGTAACATGTAAGCATCATCTCGAGTAAGCACAGTTGCGGTGTGACGAACTTGCTGGCGAGATACCGACTCGACATAACAGCGACTTTTTTTATTCGGTCGTAGAATGTCGGATGCAGAAAACTCTATTCAACCTCCCTGGACGTGATAAAAGCATTATGAGCCATGTCGCGTGTTTTCTAAGATGTTTAGTTGCGTCGCAAGTTTGTGCACTAAGCTACCCTTTTCCTTCTATAGTTACGTTTGACTAC";

        Map<Character,Integer> nucleobaseCount = new HashMap<Character, Integer>();
        for (char nucleobase : genome.toCharArray()) {
            if(nucleobaseCount.containsKey(nucleobase)) {
                nucleobaseCount.put(nucleobase,nucleobaseCount.get(nucleobase)+1);
            } else {
                nucleobaseCount.put(nucleobase, 1);
            }
        }

        System.out.println(nucleobaseCount.get('A') + " " + nucleobaseCount.get('C') + " " + nucleobaseCount.get('G') + " " + nucleobaseCount.get('T'));
    }

    @Test
    public void shouldTranslateDNAtoRNA() throws Exception {
        String dna = "TTCCCCCAATGGGGTGAAAGATTACGGGGCCAAGTCTCAATCGGCATTTGGTTTTCGCTTGGAGCTTAACTGCATCCATGTCTGTACTTATCCTGTTGTTCCTTGAGAGGACAATCGTACGATCACACCGGGGTTAGAAAATTTTATAAAGCAAGACAGAACATACGTCACCAAACAACGAGACCAGTATAGGGGCAAACGGTGATAGTGTCGTATTATGAGTTCGAAGAGGGGCAAGGGGGAGAAGCGGTAATGGTACCGAGTAAAATCTTTTCATGAAGAAACCTACTCCTTCTTATGTCCTCTCATGTATCATTCCACGGGAGGTGGCCGACGTTTCTGACTCAATAACGGTACGCCTACAAATTAGCCGGAGGTAGGACCCCGCGGAGCTGCTTCCCAGATGACGACATTCGCTGATCCCCCTTAGCATATTTGACTGCAACTCGGGTGGTGTATGGTTCCCCTATCAGCTGACAATAATCAGACAGGATGACACCACGAAACACTAATAATAATATCCGAGTCTATATCTTGGTTCCGGCAGCCGTCTAAGAGCTCTTTGACGAGACTGCATACGGGCGATCACGCTATCGCTTAGAGTAGTTTTGTCGGATTCAGACGTGAGCTGGCCTCGATGAGTAGCTTGTTTATGTAAGACGACTTAGGCAGCGCGTGTGCCGAAGCACGATCTCACTGCACAATAGTTAAGTAGAGAGTGGCTCTGGAGGGGCCCGGGTAGACAAGCTTAAGGTATTGGTGTATCTTTTCAACGGGTCCTAATTCGTATACTTGGCCAACTCACGTTTCCCGGGGCATACACACCTTGAAAAGTTCACACTGCACGTATGTCCTCATACATACATCACGGCCTACAGCTTGCCAGTTGGCCGAGATCGGGGATGGCAAATAAGGGAGATAACGTCGCGAAGACGACTCCTCCTGTCACTCGCCCTGTCGCGATAGGCAAACACG";

        String rna = "";
        for (char dnaNucleobase : dna.toCharArray()) {
            if(dnaNucleobase=='T') {
                rna += 'U';
            } else {
                rna += dnaNucleobase;
            }
        }
        System.out.println(rna);
    }
}
