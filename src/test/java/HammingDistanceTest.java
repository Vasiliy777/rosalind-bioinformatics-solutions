import org.assertj.core.data.Offset;
import org.junit.Test;

import static org.apache.commons.lang3.StringUtils.*;
import static org.assertj.core.api.Assertions.assertThat;

public class HammingDistanceTest {

    @Test
    public void shouldCalculateHammingDistance() {
        String genome1 = "GAGCCTACTAACGGGAT";
        String genome2 = "CATCGTAATGACGGCCT";

        int hammingDistance = calculateHammingDistance(genome1,genome2);
        assertThat(hammingDistance).isEqualTo(7);
    }

    @Test
    public void shouldCalculateHammingDistanceTestCase() {
        String genomes = "CCTAGGACCCTCCCCGTATTCCTGGATTGACACCCGTCGCCTGGATCTATCAACGAGATGACGGAATACATGCCACTTCAACCTGGCAATATCCATACACAGGGGCTCAACGCGGGGGGTGAGGTGGCAAAACACTGCTATTCCCACTAAACTGGATGGGTTATGTCTCCCCGCCATGTTAGTTATTTCCGGGTGTGGGGAAGTACAGGTTACGGAGCCGTGCGGCCGGATCATAATGCCACGACCATTGCGGAAACCGAACTATAGTTAACCTCACTATCTCATCGGGCTAAGCTGCATATATCAAGAAGGACTACTTCTACCCATTATATTGCTGCCAGCGGCAAGTGACACAAACATGTGTCCACGGAATTCTGTAAATACTTACCTTGTGTACAACACACCAGTAGGTGAAAGGAACCAGGTAATGACTATGTATCATACGGTTGCCGGCGTCGCACGAATCCGTCGGAGCATCGCATCTTATAATAATTACTAAGAGGTTCCGATAATAGCTGCGTTGTGATCACTAGTGGCGTCGGAACTCAAGCTCGGTGGGAACTGACATCCTAATATCCCCAATCTTTTGTCTTGTACAAATGCTGACATTAATGTCAAGCCAATCGCCAGAGATCGAAATAAGACGGCAAAACACTTCATCGCGATAGACCATACCGAAGTCCCACATTAGACCGTCGGGCCATTCCGCAAAAATGCATGTATCTGTAACCATCAATGGATCCTTTGAGGTGTAGGGTGAGTTTACGCGGGGTGAGTCGAATCTCAGCTGATCTAAACGTCATCCGATTTTGCTCGATTCAGACTCCCTGGCGCTAGCTGAATACTCATAGCCCTTTAATATGACGAACACAGGACCTGAACAAATAAGGATTTGCCAAATG\n" +
                "CTTTTTGCCACCGGGGCTTAGCTAGGGTGATATTCCATCCCAGGATCGAGTAACGAGCTGCCGGAAGACTCGGAGCTTCAACCTAGCGTTATTTATATATTCACTCACAATGGTGGGAGGGCGTTTAAATCGTAGTGCTCCTCTCTCTGAATTGATAAGGTGATGAGCCCTCCCCCGGTCCGTCACTTGCGTCGGTTCCGATGTACACGTTGTAGGGACTTGCCGTGTCATTAATCTCCCACGAGCGGCACGGCAAGCCTCCCATATGTGATCGTCCCAGCCGTCCTTGCCTAAACTGAGAGGGCGAGCAGGATCAACCACCCCGGGTATGACCGTCCGAGCAATATCTGACACCAAAAAGATTGGAGGTTATATCCTTAATGATTTTCGTACCTCCTTCGGCTCTGCAGTCTAACGTATGTAGGTAATCACCAGGTATCGTTTGTGTCACGGAGGCGGAGCAATCCGATGAAAACATACGACCTATAGTCCGAAGCCAGACCGTCGTATTATCCTATGGCTGTGAACTCGCCGCGCAGGGGACATCAAACCCGTTAGTTAGAGAGGTGCTCTTATGCTGATACAAATGGCTTATAAACAATCCCATGGCCGCATCCATCCAATTACCCGCAAGCAAAACATGGCTGACAAACACTTCCTTCTTGTAAACTATACGTCAGTGCCGGATTTGGCTCAAAGTGCTTTGCGGAGAGAACCCTTTCTTCCTTAATACTGACTGAGTCTACCAGTCAAAGCTCGAACTGCCTCAGGCTGAGTCGAATGTCCGCGGAAATACACGCATGCGGATTTTGTTCCATAAAAACGTCATTGTGATCACGCCATACCACTAGGGAGTCGAGTAAACTAACCGAGTGCAGGCCCGGTGAATGTTTATCCCCGTG";

        int hammingDistance = calculateHammingDistance(substringBefore(genomes,"\n"),substringAfter(genomes,"\n"));

        assertThat(hammingDistance).isEqualTo(448);
    }

    private int calculateHammingDistance(String genome1, String genome2) {
        int hammingDistance = 0;
        for (int i = 0; i < genome1.toCharArray().length; i++) {
            char nucleotyde1 = genome1.toCharArray()[i];
            if(genome2.toCharArray()[i] != nucleotyde1) {
                hammingDistance ++;
            }
        }
        return hammingDistance;
    }


}
